{"version":3,"sources":["gulpfile.ts"],"names":[],"mappings":";;AACA,6BAA6B;AAC7B,sCAAsC;AACtC,8CAA8C;AAC9C,0CAA0C;AAC1C,sCAAsC;AAEtC,MAAM,KAAK,GAAG;IACV,aAAa;IACb,aAAa;CAChB,CAAC;AAEF,MAAM,SAAS,GAAG,EAAE,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;AAEtD,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;IACb,MAAM,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;IACzC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;SACzC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;SACvB,IAAI,CAAC,SAAS,EAAE,CAAC;SACjB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAClC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACrB,IAAI,CAAC,SAAS,CAAC;SACf,IAAI,CAAC,KAAK,CAAC;QACR,OAAO,EAAE,kBAAkB;QAC3B,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,KAAK,GAAG,IAAI;KAC1C,EAAE,IAAI,CAAC,CAAC,CAAC;IACd,MAAM,CAAC,MAAM,CAAC;AAClB,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,EAAE;IAC5B,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AAE9B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC","file":"gulpfile.js","sourcesContent":["import * as fs from \"fs\";\r\nimport * as gulp from \"gulp\";\r\nimport * as filter from \"gulp-filter\";\r\nimport * as sourcemaps from \"gulp-sourcemaps\";\r\nimport * as mocha from \"gulp-spawn-mocha\";\r\nimport * as ts from \"gulp-typescript\";\r\n\r\nconst paths = [\r\n    \"src/**/*.ts\",\r\n    \"gulpfile.ts\",\r\n];\r\n\r\nconst tsProject = ts.createProject(\"./tsconfig.json\");\r\n\r\ngulp.task(\"tsc\", () => {\r\n    const testFiles = filter(\"**/*.test.js\");\r\n    const stream = gulp.src(paths, { base: \"./\" })\r\n        .pipe(sourcemaps.init())\r\n        .pipe(tsProject())\r\n        .pipe(sourcemaps.write(\"./\", null))\r\n        .pipe(gulp.dest(\"./\"))\r\n        .pipe(testFiles)\r\n        .pipe(mocha({\r\n            require: \"./utils/mocha.js\",\r\n            R: process.env.MOCHA_MIN ? \"min\" : null,\r\n        }, null));\r\n    return stream;\r\n});\r\n\r\ngulp.task(\"watch\", [\"compile\"], () => {\r\n    gulp.watch(paths, [\"tsc\"]);\r\n});\r\n\r\ngulp.task(\"compile\", [\"tsc\"]);\r\n\r\ngulp.task(\"default\", [\"watch\"]);\r\n"]}